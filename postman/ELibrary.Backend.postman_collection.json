{
	"info": {
		"_postman_id": "864dcc0c-6372-47b8-9084-062dc8a46f04",
		"name": "ELibraryApis",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32714822"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "user-register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert that the response status code is either 200 or 400\r",
									"pm.test(\"Register status code is 201 or 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
									"});\r",
									"\r",
									"// Default to unsuccessful registration\r",
									"pm.environment.set(\"registration_success\", false);\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    pm.environment.set(\"registration_success\", true);\r",
									"} else if (pm.response.code === 400) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    var messages = jsonResponse.messages || [];\r",
									"\r",
									"    var usernameTaken = messages.some(msg => msg.includes(\"Username 'example' is already taken.\"));\r",
									"\r",
									"    pm.test(\"Username already taken\", function () {\r",
									"        pm.expect(usernameTaken).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (usernameTaken) {\r",
									"        pm.environment.set(\"registration_success\", true);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"example@gmail.com\",\r\n  \"password\": \"123456;QWERTY\",\r\n  \"confirmPassword\": \"123456;QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/register",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"accessToken\", jsonResponse.authToken.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", jsonResponse.authToken.refreshToken);\r",
									"    pm.environment.set(\"refreshTokenExpiryDate\", jsonResponse.authToken.refreshTokenExpiryDate);\r",
									"    pm.environment.set(\"userName\", jsonResponse.userName);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var registrationSuccess = pm.environment.get(\"registration_success\");\r",
									"if (!registrationSuccess) {\r",
									"     console.error(\"Registration is failed!\")\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"login\": \"example@gmail.com\",\r\n  \"password\": \"123456;QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/login",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"example@gmail.com\",\r\n  \"oldPassword\": \"123456;QWERTY\",\r\n  \"password\": \"123456;QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/update",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Refresh status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", jsonResponse.refreshToken);\r",
									"    pm.environment.set(\"refreshTokenExpiryDate\", jsonResponse.refreshTokenExpiryDate);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accessToken\": \"{{accessToken}}\",\r\n  \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/refresh",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-admin-register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"example1@gmail.com\",\r\n  \"password\": \"123456;QWERTY\",\r\n  \"confirmPassword\": \"123456;QWERTY\",\r\n  \"roles\":[\"CLient\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/admin/register",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"admin",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-admin-get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"user_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/admin/example1@gmail.com",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"admin",
								"example1@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-admin-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currentLogin\": \"example1@gmail.com\",\r\n  \"email\": \"example2@gmail.com\",\r\n  \"password\": \"123456;QWERTY\",\r\n  \"confirmPassword\": \"123456;QWERTY\",\r\n  \"roles\":[\"Manager\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/admin/update",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"admin",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-admin-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7130/user/admin/delete/example1@gmail.com",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7130",
							"path": [
								"user",
								"admin",
								"delete",
								"example1@gmail.com"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "client",
			"item": [
				{
					"name": "client-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name\",\r\n  \"middleName\": \"middleName\",\r\n  \"lastName\": \"lastName\",\r\n  \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\",\r\n  \"address\":\"address\",\r\n  \"phone\":\"phone\",\r\n  \"email\":\"example@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name1\",\r\n  \"middleName\": \"middleName1\",\r\n  \"lastName\": \"lastName1\",\r\n  \"dateOfBirth\":\"2021-08-03T09:45:45.4656254Z\",\r\n  \"address\":\"address1\",\r\n  \"phone\":\"phone1\",\r\n  \"email\":\"example1@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"client_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-admin-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client/admin/{{user_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client",
								"admin",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-admin-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"client_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name\",\r\n  \"middleName\": \"middleName\",\r\n  \"lastName\": \"lastName\",\r\n  \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\",\r\n  \"address\":\"address\",\r\n  \"phone\":\"phone\",\r\n  \"email\":\"example@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client/admin/{{user_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client",
								"admin",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-admin-get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client/admin/{{user_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client",
								"admin",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "client-admin-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name1\",\r\n  \"middleName\": \"middleName1\",\r\n  \"lastName\": \"lastName1\",\r\n  \"dateOfBirth\":\"2021-08-03T09:45:45.4656254Z\",\r\n  \"address\":\"address1\",\r\n  \"phone\":\"phone1\",\r\n  \"email\":\"example1@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/client/admin/{{user_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"client",
								"admin",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "order-get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"order_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deliveryAddress\": \"address\",\r\n    \"deliveryTime\": \"2030-08-03T09:45:45.4656254Z\",\r\n    \"orderStatus\": 0,\r\n    \"books\": [\r\n        {\r\n            \"id\": {{book_id}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{order_id}},\r\n    \"deliveryAddress\": \"newaddress\",\r\n    \"deliveryTime\": \"2030-08-03T09:45:45.4656254Z\",\r\n    \"orderStatus\": 1,\r\n    \"books\": [\r\n        {\r\n            \"id\": {{book_id}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order/{{order_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-manager-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order/manager/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order",
								"manager",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-manager-update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{order_id}},\r\n    \"deliveryAddress\": \"newaddress\",\r\n    \"deliveryTime\": \"2030-08-03T09:45:45.4656254Z\",\r\n    \"orderStatus\": 1,\r\n    \"books\": [\r\n        {\r\n            \"id\": {{book_id}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order/manager",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order",
								"manager"
							]
						}
					},
					"response": []
				},
				{
					"name": "order-manager-delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7132/order/manager/{{order_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7132",
							"path": [
								"order",
								"manager",
								"{{order_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "author",
			"item": [
				{
					"name": "author-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/author/{{author_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author",
								"{{author_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "author-get-amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is above 0\", function () {\r",
									"    var responseData = parseInt(pm.response.text(), 10); \r",
									"    pm.expect(responseData).to.be.above(0);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/author/amount",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "author-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is abone 0\", function () {\r",
									"     pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"containsName\": \"\",\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/author/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "author-manager-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"author_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"name\",\r\n    \"lastName\":\"lastName\",\r\n    \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/author",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "author-manager-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"author_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/author',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"id\":id,\r",
									"                    \"name\":\"name\",\r",
									"                    \"lastName\":\"lastName\",\r",
									"                    \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{author_id}},\r\n    \"name\":\"newName\",\r\n    \"lastName\":\"lastName\",\r\n    \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/author",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "author-manager-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/author',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"name\":\"name\",\r",
									"                    \"lastName\":\"lastName\",\r",
									"                    \"dateOfBirth\":\"2020-08-03T09:45:45.4656254Z\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"author_id\", jsonResponse.id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/author/{{author_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"author",
								"{{author_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "genre",
			"item": [
				{
					"name": "genre-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/genre/{{genre_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre",
								"{{genre_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "genre-get-amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is above 0\", function () {\r",
									"    var responseData = parseInt(pm.response.text(), 10); \r",
									"    pm.expect(responseData).to.be.above(0);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/genre/amount",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "genre-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is abone 0\", function () {\r",
									"     pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"containsName\": \"\",\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/genre/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "genre-manager-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"genre_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/genre",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre"
							]
						}
					},
					"response": []
				},
				{
					"name": "genre-manager-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"genre_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/genre',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"id\":id,\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{genre_id}},\r\n    \"name\":\"newName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/genre",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre"
							]
						}
					},
					"response": []
				},
				{
					"name": "genre-manager-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/genre',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"genre_id\", jsonResponse.id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/genre/{{genre_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"genre",
								"{{genre_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "publisher",
			"item": [
				{
					"name": "publisher-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/publisher/{{publisher_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher",
								"{{publisher_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "publisher-get-amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is above 0\", function () {\r",
									"    var responseData = parseInt(pm.response.text(), 10); \r",
									"    pm.expect(responseData).to.be.above(0);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/publisher/amount",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "publisher-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is abone 0\", function () {\r",
									"     pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"containsName\": \"\",\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/publisher/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "publisher-manager-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"publisher_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/publisher",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "publisher-manager-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"publisher_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/publisher',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"id\":id,\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{publisher_id}},\r\n    \"name\":\"newName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/publisher",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "publisher-manager-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/publisher',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"publisher_id\", jsonResponse.id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/publisher/{{publisher_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"publisher",
								"{{publisher_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cover-type",
			"item": [
				{
					"name": "covertype-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/covertype/{{covertype_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype",
								"{{covertype_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "covertype-get-amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is above 0\", function () {\r",
									"    var responseData = parseInt(pm.response.text(), 10); \r",
									"    pm.expect(responseData).to.be.above(0);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/covertype/amount",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "covertype-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is abone 0\", function () {\r",
									"     pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"containsName\":\"\",\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/covertype/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "covertype-manager-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"covertype_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/covertype",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype"
							]
						}
					},
					"response": []
				},
				{
					"name": "covertype-manager-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"covertype_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/covertype',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"id\":id,\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{cover_id}},\r\n    \"name\":\"newName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/covertype",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype"
							]
						}
					},
					"response": []
				},
				{
					"name": "covertype-manager-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/covertype',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"name\":\"name\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"covertype_id\", jsonResponse.id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/covertype/{{covertype_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"covertype",
								"{{covertype_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "book",
			"item": [
				{
					"name": "book-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/book/{{book_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book",
								"{{book_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "book-get-amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is above 0\", function () {\r",
									"    var responseData = parseInt(pm.response.text(), 10); \r",
									"    pm.expect(responseData).to.be.above(0);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/book/amount",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "book-pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Amount is abone 0\", function () {\r",
									"     pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"containsName\": \"\",\r\n    \"pageNumber\": 1,\r\n    \"pageSize\": 2,\r\n    \"publicationFromUTC\": \"2019-08-03T09:45:45.4656254Z\",\r\n    \"publicationToUTC\": \"2021-08-03T09:45:45.4656254Z\",\r\n    \"minPrice\": 0,\r\n    \"maxPrice\": 1000\r\n    // \"onlyInStock\": true,\r\n    // \"minPageAmount\": 0,\r\n    // \"maxPageAmount\": 0,\r\n    // \"authorId\": 1,\r\n    // \"genreId\": 1,\r\n    // \"publisherId\": 1,\r\n    // \"coverTypeId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/book/pagination",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book",
								"pagination"
							]
						}
					},
					"response": []
				},
				{
					"name": "book-manager-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"book_id\", jsonResponse.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"title\",\r\n    \"publicationDate\": \"2020-08-03T09:45:45.4656254Z\",\r\n    \"price\": 500,\r\n    \"pageAmount\": 500,\r\n    \"stockAmount\": 20,\r\n    \"authorId\": {{author_id}},\r\n    \"genreId\": {{genre_id}},\r\n    \"publisherId\": {{publisher_id}},\r\n    \"coverTypeId\": {{covertype_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/book",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "book-manager-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"book_id\"); \r",
									"    var author_id = pm.environment.get(\"author_id\");\r",
									"    var genre_id = pm.environment.get(\"genre_id\"); \r",
									"    var publisher_id = pm.environment.get(\"publisher_id\");\r",
									"    var covertype_id = pm.environment.get(\"covertype_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/book',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"id\":id,\r",
									"                    \"name\": \"title\",\r",
									"                    \"publicationDate\": \"2020-08-03T09:45:45.4656254Z\",\r",
									"                    \"price\": 500,\r",
									"                    \"pageAmount\": 500,\r",
									"                    \"stockAmount\": 20,\r",
									"                    \"authorId\": author_id,\r",
									"                    \"genreId\": genre_id,\r",
									"                    \"publisherId\": publisher_id,\r",
									"                    \"coverTypeId\": covertype_id\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{book_id}},\r\n    \"name\": \"title1\",\r\n    \"publicationDate\": \"2020-08-03T09:45:45.4656254Z\",\r\n    \"price\": 500,\r\n    \"pageAmount\": 500,\r\n    \"stockAmount\": 20,\r\n    \"authorId\": {{author_id}},\r\n    \"genreId\": {{genre_id}},\r\n    \"publisherId\": {{publisher_id}},\r\n    \"coverTypeId\": {{covertype_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7131/book",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "book-manager-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    \r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var id = pm.environment.get(\"book_id\"); \r",
									"    var author_id = pm.environment.get(\"author_id\");\r",
									"    var genre_id = pm.environment.get(\"genre_id\"); \r",
									"    var publisher_id = pm.environment.get(\"publisher_id\");\r",
									"    var covertype_id = pm.environment.get(\"covertype_id\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7131/book',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                    \"name\": \"title\",\r",
									"                    \"publicationDate\": \"2020-08-03T09:45:45.4656254Z\",\r",
									"                    \"price\": 500,\r",
									"                    \"pageAmount\": 500,\r",
									"                    \"stockAmount\": 20,\r",
									"                    \"authorId\": author_id,\r",
									"                    \"genreId\": genre_id,\r",
									"                    \"publisherId\": publisher_id,\r",
									"                    \"coverTypeId\": covertype_id\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"book_id\", jsonResponse.id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7131/book/{{book_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7131",
							"path": [
								"book",
								"{{book_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}