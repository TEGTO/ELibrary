// <auto-generated />
using System;
using LibraryShopEntities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryApi.Migrations
{
    [DbContext(typeof(LibraryShopDbContext))]
    [Migration("20241020195351_ChangedNamingConvetionToSnakeCase")]
    partial class ChangedNamingConvetionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Library.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Library.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("CoverImgUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("cover_img_url");

                    b.Property<int>("CoverType")
                        .HasColumnType("integer")
                        .HasColumnName("cover_type");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("PageAmount")
                        .HasColumnType("integer")
                        .HasColumnName("page_amount");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer")
                        .HasColumnName("publisher_id");

                    b.Property<int>("StockAmount")
                        .HasColumnType("integer")
                        .HasColumnName("stock_amount");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_books_author_id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_books_genre_id");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_books_publisher_id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Library.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Library.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Cart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.CartBook", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("BookAmount")
                        .HasColumnType("integer")
                        .HasColumnName("book_amount");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cart_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_books");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_cart_books_book_id");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_books_cart_id");

                    b.ToTable("cart_books", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("address");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("phone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_user_id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("delivery_address");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_method");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_time");

                    b.Property<int>("OrderAmount")
                        .HasColumnType("integer")
                        .HasColumnName("order_amount");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("order_status");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_orders_client_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.OrderBook", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("BookAmount")
                        .HasColumnType("integer")
                        .HasColumnName("book_amount");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("pk_order_books");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_order_books_book_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_books_order_id");

                    b.ToTable("order_books", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.StockBookChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int>("ChangeAmount")
                        .HasColumnType("integer")
                        .HasColumnName("change_amount");

                    b.Property<int?>("StockBookOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_book_order_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_book_changes");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_stock_book_changes_book_id");

                    b.HasIndex("StockBookOrderId")
                        .HasDatabaseName("ix_stock_book_changes_stock_book_order_id");

                    b.ToTable("stock_book_changes", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.StockBookOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("TotalChangeAmount")
                        .HasColumnType("integer")
                        .HasColumnName("total_change_amount");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stock_book_orders");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_stock_book_orders_client_id");

                    b.ToTable("stock_book_orders", (string)null);
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_authors_author_id");

                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_genres_genre_id");

                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_publishers_publisher_id");

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.CartBook", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_books_books_book_id");

                    b.HasOne("LibraryShopEntities.Domain.Entities.Shop.Cart", "Cart")
                        .WithMany("Books")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_books_carts_cart_id");

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Order", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Shop.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.OrderBook", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_books_books_book_id");

                    b.HasOne("LibraryShopEntities.Domain.Entities.Shop.Order", "Order")
                        .WithMany("OrderBooks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_books_orders_order_id");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.StockBookChange", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Library.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stock_book_changes_books_book_id");

                    b.HasOne("LibraryShopEntities.Domain.Entities.Shop.StockBookOrder", null)
                        .WithMany("StockBookChanges")
                        .HasForeignKey("StockBookOrderId")
                        .HasConstraintName("fk_stock_book_changes_stock_book_orders_stock_book_order_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.StockBookOrder", b =>
                {
                    b.HasOne("LibraryShopEntities.Domain.Entities.Shop.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stock_book_orders_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Cart", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.Order", b =>
                {
                    b.Navigation("OrderBooks");
                });

            modelBuilder.Entity("LibraryShopEntities.Domain.Entities.Shop.StockBookOrder", b =>
                {
                    b.Navigation("StockBookChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
